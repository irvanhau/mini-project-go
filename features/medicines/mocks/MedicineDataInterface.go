// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	medicines "MiniProject/features/medicines"

	mock "github.com/stretchr/testify/mock"
)

// MedicineDataInterface is an autogenerated mock type for the MedicineDataInterface type
type MedicineDataInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *MedicineDataInterface) Delete(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: kategori, name
func (_m *MedicineDataInterface) GetAll(kategori int, name string) ([]medicines.MedicineInfo, error) {
	ret := _m.Called(kategori, name)

	var r0 []medicines.MedicineInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int, string) ([]medicines.MedicineInfo, error)); ok {
		return rf(kategori, name)
	}
	if rf, ok := ret.Get(0).(func(int, string) []medicines.MedicineInfo); ok {
		r0 = rf(kategori, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]medicines.MedicineInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(int, string) error); ok {
		r1 = rf(kategori, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *MedicineDataInterface) GetByID(id int) ([]medicines.MedicineInfo, error) {
	ret := _m.Called(id)

	var r0 []medicines.MedicineInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]medicines.MedicineInfo, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []medicines.MedicineInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]medicines.MedicineInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newData
func (_m *MedicineDataInterface) Insert(newData medicines.Medicine) (*medicines.Medicine, error) {
	ret := _m.Called(newData)

	var r0 *medicines.Medicine
	var r1 error
	if rf, ok := ret.Get(0).(func(medicines.Medicine) (*medicines.Medicine, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(medicines.Medicine) *medicines.Medicine); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicines.Medicine)
		}
	}

	if rf, ok := ret.Get(1).(func(medicines.Medicine) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: newData, id
func (_m *MedicineDataInterface) Update(newData medicines.UpdateMedicine, id int) (bool, error) {
	ret := _m.Called(newData, id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(medicines.UpdateMedicine, int) (bool, error)); ok {
		return rf(newData, id)
	}
	if rf, ok := ret.Get(0).(func(medicines.UpdateMedicine, int) bool); ok {
		r0 = rf(newData, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(medicines.UpdateMedicine, int) error); ok {
		r1 = rf(newData, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFileMedicine provides a mock function with given fields: file, id
func (_m *MedicineDataInterface) UpdateFileMedicine(file string, id int) (bool, error) {
	ret := _m.Called(file, id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (bool, error)); ok {
		return rf(file, id)
	}
	if rf, ok := ret.Get(0).(func(string, int) bool); ok {
		r0 = rf(file, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(file, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePhotoMedicine provides a mock function with given fields: photo, id
func (_m *MedicineDataInterface) UpdatePhotoMedicine(photo string, id int) (bool, error) {
	ret := _m.Called(photo, id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) (bool, error)); ok {
		return rf(photo, id)
	}
	if rf, ok := ret.Get(0).(func(string, int) bool); ok {
		r0 = rf(photo, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(photo, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMedicineDataInterface creates a new instance of MedicineDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMedicineDataInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MedicineDataInterface {
	mock := &MedicineDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
