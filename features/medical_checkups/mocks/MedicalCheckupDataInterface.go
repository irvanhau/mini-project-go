// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	medicalcheckups "MiniProject/features/medical_checkups"

	mock "github.com/stretchr/testify/mock"
)

// MedicalCheckupDataInterface is an autogenerated mock type for the MedicalCheckupDataInterface type
type MedicalCheckupDataInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *MedicalCheckupDataInterface) Delete(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *MedicalCheckupDataInterface) GetAll() ([]medicalcheckups.MedicalCheckupInfo, error) {
	ret := _m.Called()

	var r0 []medicalcheckups.MedicalCheckupInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]medicalcheckups.MedicalCheckupInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []medicalcheckups.MedicalCheckupInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]medicalcheckups.MedicalCheckupInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *MedicalCheckupDataInterface) GetByID(id int) ([]medicalcheckups.MedicalCheckupInfo, error) {
	ret := _m.Called(id)

	var r0 []medicalcheckups.MedicalCheckupInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]medicalcheckups.MedicalCheckupInfo, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []medicalcheckups.MedicalCheckupInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]medicalcheckups.MedicalCheckupInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newData
func (_m *MedicalCheckupDataInterface) Insert(newData medicalcheckups.MedicalCheckup) (*medicalcheckups.MedicalCheckup, error) {
	ret := _m.Called(newData)

	var r0 *medicalcheckups.MedicalCheckup
	var r1 error
	if rf, ok := ret.Get(0).(func(medicalcheckups.MedicalCheckup) (*medicalcheckups.MedicalCheckup, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(medicalcheckups.MedicalCheckup) *medicalcheckups.MedicalCheckup); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalcheckups.MedicalCheckup)
		}
	}

	if rf, ok := ret.Get(1).(func(medicalcheckups.MedicalCheckup) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: newData, id
func (_m *MedicalCheckupDataInterface) Update(newData medicalcheckups.UpdateMedicalCheckup, id int) (bool, error) {
	ret := _m.Called(newData, id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(medicalcheckups.UpdateMedicalCheckup, int) (bool, error)); ok {
		return rf(newData, id)
	}
	if rf, ok := ret.Get(0).(func(medicalcheckups.UpdateMedicalCheckup, int) bool); ok {
		r0 = rf(newData, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(medicalcheckups.UpdateMedicalCheckup, int) error); ok {
		r1 = rf(newData, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMedicalCheckupDataInterface creates a new instance of MedicalCheckupDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMedicalCheckupDataInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MedicalCheckupDataInterface {
	mock := &MedicalCheckupDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
