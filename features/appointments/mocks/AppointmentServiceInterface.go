// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	appointments "MiniProject/features/appointments"

	mock "github.com/stretchr/testify/mock"
)

// AppointmentServiceInterface is an autogenerated mock type for the AppointmentServiceInterface type
type AppointmentServiceInterface struct {
	mock.Mock
}

// CreateAppointment provides a mock function with given fields: newData
func (_m *AppointmentServiceInterface) CreateAppointment(newData appointments.Appointment) (*appointments.Appointment, error) {
	ret := _m.Called(newData)

	var r0 *appointments.Appointment
	var r1 error
	if rf, ok := ret.Get(0).(func(appointments.Appointment) (*appointments.Appointment, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(appointments.Appointment) *appointments.Appointment); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appointments.Appointment)
		}
	}

	if rf, ok := ret.Get(1).(func(appointments.Appointment) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppointment provides a mock function with given fields: id
func (_m *AppointmentServiceInterface) DeleteAppointment(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (bool, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppointment provides a mock function with given fields: id
func (_m *AppointmentServiceInterface) GetAppointment(id int) ([]appointments.AppointmentInfo, error) {
	ret := _m.Called(id)

	var r0 []appointments.AppointmentInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]appointments.AppointmentInfo, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) []appointments.AppointmentInfo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]appointments.AppointmentInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppointments provides a mock function with given fields: page
func (_m *AppointmentServiceInterface) GetAppointments(page int) ([]appointments.AppointmentInfo, int, int, error) {
	ret := _m.Called(page)

	var r0 []appointments.AppointmentInfo
	var r1 int
	var r2 int
	var r3 error
	if rf, ok := ret.Get(0).(func(int) ([]appointments.AppointmentInfo, int, int, error)); ok {
		return rf(page)
	}
	if rf, ok := ret.Get(0).(func(int) []appointments.AppointmentInfo); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]appointments.AppointmentInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(int) int); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(int) int); ok {
		r2 = rf(page)
	} else {
		r2 = ret.Get(2).(int)
	}

	if rf, ok := ret.Get(3).(func(int) error); ok {
		r3 = rf(page)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// UpdateAppointment provides a mock function with given fields: newData, id
func (_m *AppointmentServiceInterface) UpdateAppointment(newData appointments.UpdateAppointment, id int) (bool, error) {
	ret := _m.Called(newData, id)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(appointments.UpdateAppointment, int) (bool, error)); ok {
		return rf(newData, id)
	}
	if rf, ok := ret.Get(0).(func(appointments.UpdateAppointment, int) bool); ok {
		r0 = rf(newData, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(appointments.UpdateAppointment, int) error); ok {
		r1 = rf(newData, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAppointmentServiceInterface creates a new instance of AppointmentServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppointmentServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppointmentServiceInterface {
	mock := &AppointmentServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
