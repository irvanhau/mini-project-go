// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	transactions "MiniProject/features/transactions"

	mock "github.com/stretchr/testify/mock"
)

// TransactionDataInterface is an autogenerated mock type for the TransactionDataInterface type
type TransactionDataInterface struct {
	mock.Mock
}

// GetByID provides a mock function with given fields: idTrans
func (_m *TransactionDataInterface) GetByID(idTrans int) (transactions.Transaction, error) {
	ret := _m.Called(idTrans)

	var r0 transactions.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (transactions.Transaction, error)); ok {
		return rf(idTrans)
	}
	if rf, ok := ret.Get(0).(func(int) transactions.Transaction); ok {
		r0 = rf(idTrans)
	} else {
		r0 = ret.Get(0).(transactions.Transaction)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(idTrans)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactions provides a mock function with given fields:
func (_m *TransactionDataInterface) GetTransactions() ([]transactions.TransactionInfo, error) {
	ret := _m.Called()

	var r0 []transactions.TransactionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]transactions.TransactionInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []transactions.TransactionInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.TransactionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserTransactions provides a mock function with given fields: idUser
func (_m *TransactionDataInterface) GetUserTransactions(idUser int) (transactions.TransactionInfoUser, transactions.TransactionDetail, error) {
	ret := _m.Called(idUser)

	var r0 transactions.TransactionInfoUser
	var r1 transactions.TransactionDetail
	var r2 error
	if rf, ok := ret.Get(0).(func(int) (transactions.TransactionInfoUser, transactions.TransactionDetail, error)); ok {
		return rf(idUser)
	}
	if rf, ok := ret.Get(0).(func(int) transactions.TransactionInfoUser); ok {
		r0 = rf(idUser)
	} else {
		r0 = ret.Get(0).(transactions.TransactionInfoUser)
	}

	if rf, ok := ret.Get(1).(func(int) transactions.TransactionDetail); ok {
		r1 = rf(idUser)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(transactions.TransactionDetail)
		}
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(idUser)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Insert provides a mock function with given fields: idUser, idMcu
func (_m *TransactionDataInterface) Insert(idUser int, idMcu int) (*transactions.Transaction, error) {
	ret := _m.Called(idUser, idMcu)

	var r0 *transactions.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*transactions.Transaction, error)); ok {
		return rf(idUser, idMcu)
	}
	if rf, ok := ret.Get(0).(func(int, int) *transactions.Transaction); ok {
		r0 = rf(idUser, idMcu)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transactions.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(idUser, idMcu)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSnapURL provides a mock function with given fields: snapUrl, idTrans
func (_m *TransactionDataInterface) UpdateSnapURL(snapUrl string, idTrans int) ([]transactions.Transaction, error) {
	ret := _m.Called(snapUrl, idTrans)

	var r0 []transactions.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([]transactions.Transaction, error)); ok {
		return rf(snapUrl, idTrans)
	}
	if rf, ok := ret.Get(0).(func(string, int) []transactions.Transaction); ok {
		r0 = rf(snapUrl, idTrans)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(snapUrl, idTrans)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTransactionStatus provides a mock function with given fields: transID, status
func (_m *TransactionDataInterface) UpdateTransactionStatus(transID string, status string) (bool, error) {
	ret := _m.Called(transID, status)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (bool, error)); ok {
		return rf(transID, status)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(transID, status)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(transID, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionDataInterface creates a new instance of TransactionDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionDataInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionDataInterface {
	mock := &TransactionDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
