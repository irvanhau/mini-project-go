// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	transactions "MiniProject/features/transactions"

	mock "github.com/stretchr/testify/mock"
)

// TransactionServiceInterface is an autogenerated mock type for the TransactionServiceInterface type
type TransactionServiceInterface struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: idUser, idMcu
func (_m *TransactionServiceInterface) CreateTransaction(idUser int, idMcu int) (*transactions.Transaction, error) {
	ret := _m.Called(idUser, idMcu)

	var r0 *transactions.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*transactions.Transaction, error)); ok {
		return rf(idUser, idMcu)
	}
	if rf, ok := ret.Get(0).(func(int, int) *transactions.Transaction); ok {
		r0 = rf(idUser, idMcu)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*transactions.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(idUser, idMcu)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactions provides a mock function with given fields:
func (_m *TransactionServiceInterface) GetTransactions() ([]transactions.TransactionInfo, error) {
	ret := _m.Called()

	var r0 []transactions.TransactionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]transactions.TransactionInfo, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []transactions.TransactionInfo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.TransactionInfo)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserTransactions provides a mock function with given fields: idUser
func (_m *TransactionServiceInterface) GetUserTransactions(idUser int) (transactions.TransactionInfoUser, transactions.TransactionDetail, error) {
	ret := _m.Called(idUser)

	var r0 transactions.TransactionInfoUser
	var r1 transactions.TransactionDetail
	var r2 error
	if rf, ok := ret.Get(0).(func(int) (transactions.TransactionInfoUser, transactions.TransactionDetail, error)); ok {
		return rf(idUser)
	}
	if rf, ok := ret.Get(0).(func(int) transactions.TransactionInfoUser); ok {
		r0 = rf(idUser)
	} else {
		r0 = ret.Get(0).(transactions.TransactionInfoUser)
	}

	if rf, ok := ret.Get(1).(func(int) transactions.TransactionDetail); ok {
		r1 = rf(idUser)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(transactions.TransactionDetail)
		}
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(idUser)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NotificationPayment provides a mock function with given fields: idTrans, idUser
func (_m *TransactionServiceInterface) NotificationPayment(idTrans int, idUser int) (string, error) {
	ret := _m.Called(idTrans, idUser)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (string, error)); ok {
		return rf(idTrans, idUser)
	}
	if rf, ok := ret.Get(0).(func(int, int) string); ok {
		r0 = rf(idTrans, idUser)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(idTrans, idUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PaymentTransaction provides a mock function with given fields: idTrans, idUser
func (_m *TransactionServiceInterface) PaymentTransaction(idTrans int, idUser int) ([]transactions.Transaction, error) {
	ret := _m.Called(idTrans, idUser)

	var r0 []transactions.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]transactions.Transaction, error)); ok {
		return rf(idTrans, idUser)
	}
	if rf, ok := ret.Get(0).(func(int, int) []transactions.Transaction); ok {
		r0 = rf(idTrans, idUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Transaction)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(idTrans, idUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTransactionServiceInterface creates a new instance of TransactionServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactionServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *TransactionServiceInterface {
	mock := &TransactionServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
