// Code generated by mockery v2.35.2. DO NOT EDIT.

package mocks

import (
	medicalcheckupdetails "MiniProject/features/medical_checkup_details"

	mock "github.com/stretchr/testify/mock"
)

// MedicalCheckupDetailDataInterface is an autogenerated mock type for the MedicalCheckupDetailDataInterface type
type MedicalCheckupDetailDataInterface struct {
	mock.Mock
}

// Delete provides a mock function with given fields: idMcu, idMcuDetail
func (_m *MedicalCheckupDetailDataInterface) Delete(idMcu int, idMcuDetail int) (bool, error) {
	ret := _m.Called(idMcu, idMcuDetail)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (bool, error)); ok {
		return rf(idMcu, idMcuDetail)
	}
	if rf, ok := ret.Get(0).(func(int, int) bool); ok {
		r0 = rf(idMcu, idMcuDetail)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(idMcu, idMcuDetail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: idMcu
func (_m *MedicalCheckupDetailDataInterface) GetAll(idMcu int) (medicalcheckupdetails.MedicalCheckupDetailInfo, medicalcheckupdetails.DetailInfo, error) {
	ret := _m.Called(idMcu)

	var r0 medicalcheckupdetails.MedicalCheckupDetailInfo
	var r1 medicalcheckupdetails.DetailInfo
	var r2 error
	if rf, ok := ret.Get(0).(func(int) (medicalcheckupdetails.MedicalCheckupDetailInfo, medicalcheckupdetails.DetailInfo, error)); ok {
		return rf(idMcu)
	}
	if rf, ok := ret.Get(0).(func(int) medicalcheckupdetails.MedicalCheckupDetailInfo); ok {
		r0 = rf(idMcu)
	} else {
		r0 = ret.Get(0).(medicalcheckupdetails.MedicalCheckupDetailInfo)
	}

	if rf, ok := ret.Get(1).(func(int) medicalcheckupdetails.DetailInfo); ok {
		r1 = rf(idMcu)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(medicalcheckupdetails.DetailInfo)
		}
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(idMcu)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetByID provides a mock function with given fields: idMcu, idMcuDetail
func (_m *MedicalCheckupDetailDataInterface) GetByID(idMcu int, idMcuDetail int) ([]medicalcheckupdetails.MedicalCheckupDetailInfo, error) {
	ret := _m.Called(idMcu, idMcuDetail)

	var r0 []medicalcheckupdetails.MedicalCheckupDetailInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]medicalcheckupdetails.MedicalCheckupDetailInfo, error)); ok {
		return rf(idMcu, idMcuDetail)
	}
	if rf, ok := ret.Get(0).(func(int, int) []medicalcheckupdetails.MedicalCheckupDetailInfo); ok {
		r0 = rf(idMcu, idMcuDetail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]medicalcheckupdetails.MedicalCheckupDetailInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(idMcu, idMcuDetail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newData
func (_m *MedicalCheckupDetailDataInterface) Insert(newData medicalcheckupdetails.MedicalCheckupDetail) (*medicalcheckupdetails.MedicalCheckupDetail, error) {
	ret := _m.Called(newData)

	var r0 *medicalcheckupdetails.MedicalCheckupDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(medicalcheckupdetails.MedicalCheckupDetail) (*medicalcheckupdetails.MedicalCheckupDetail, error)); ok {
		return rf(newData)
	}
	if rf, ok := ret.Get(0).(func(medicalcheckupdetails.MedicalCheckupDetail) *medicalcheckupdetails.MedicalCheckupDetail); ok {
		r0 = rf(newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalcheckupdetails.MedicalCheckupDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(medicalcheckupdetails.MedicalCheckupDetail) error); ok {
		r1 = rf(newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: newData, idMcu, idMcuDetail
func (_m *MedicalCheckupDetailDataInterface) Update(newData medicalcheckupdetails.UpdateMedicalCheckupDetail, idMcu int, idMcuDetail int) (bool, error) {
	ret := _m.Called(newData, idMcu, idMcuDetail)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(medicalcheckupdetails.UpdateMedicalCheckupDetail, int, int) (bool, error)); ok {
		return rf(newData, idMcu, idMcuDetail)
	}
	if rf, ok := ret.Get(0).(func(medicalcheckupdetails.UpdateMedicalCheckupDetail, int, int) bool); ok {
		r0 = rf(newData, idMcu, idMcuDetail)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(medicalcheckupdetails.UpdateMedicalCheckupDetail, int, int) error); ok {
		r1 = rf(newData, idMcu, idMcuDetail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMedicalCheckupDetailDataInterface creates a new instance of MedicalCheckupDetailDataInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMedicalCheckupDetailDataInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MedicalCheckupDetailDataInterface {
	mock := &MedicalCheckupDetailDataInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
